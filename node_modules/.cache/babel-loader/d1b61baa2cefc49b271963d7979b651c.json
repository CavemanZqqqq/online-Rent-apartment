{"ast":null,"code":"/*\n对axios二次封装\n1.配置通用的基础路径和超时\n2.显示请求进度条\n    显示进度条：请求拦截回调\n    结束进度条：响应拦截回调\n3.成功返回数据不再是response，而是响应数据体response.data\n4.统一处理请求错误，具体请求也可以选择处理或者不处理\n5.每个请求自动携带useTempleId的请求头：在请求拦截器中实现\n6.如果当前token，自动携带token的请求头\n\n\n*/\nimport Axios from \"axios\";\nimport nProgress from \"nprogress\";\nimport 'nprogress/nprogress.css';\nimport qs from 'query-string';\nconst service = Axios.create({\n  //1.配置基础路径，超时时间\n  baseURL: '/api',\n  timeout: 5000\n}); //2.请求拦截\n\nservice.interceptors.request.use(config => {\n  //console.log(config);\n  //显示进度条\n  nProgress.start(); //加token值\n  //config.headers.token = '11111';\n  //post请求，对象转字符串\n\n  if (config.method === 'post') {\n    config.data = qs.stringify(config.data);\n  }\n\n  return config;\n}); //3.响应拦截\n\nservice.interceptors.response.use(res => {\n  //结束进度条\n  nProgress.done(); //错误判断500， 200\n\n  return res.data;\n}, err => {\n  //!!!写成了promises 报错！！\n  return Promise.reject(err);\n});\nexport default service;","map":{"version":3,"names":["Axios","nProgress","qs","service","create","baseURL","timeout","interceptors","request","use","config","start","method","data","stringify","response","res","done","err","Promise","reject"],"sources":["/Users/zoujiaqi/goodp/src/api/ajax.js"],"sourcesContent":["/*\n对axios二次封装\n1.配置通用的基础路径和超时\n2.显示请求进度条\n    显示进度条：请求拦截回调\n    结束进度条：响应拦截回调\n3.成功返回数据不再是response，而是响应数据体response.data\n4.统一处理请求错误，具体请求也可以选择处理或者不处理\n5.每个请求自动携带useTempleId的请求头：在请求拦截器中实现\n6.如果当前token，自动携带token的请求头\n\n\n*/\n\nimport Axios from \"axios\";\nimport nProgress from \"nprogress\";\nimport 'nprogress/nprogress.css'\nimport qs from 'query-string'\n\nconst service = Axios.create({\n    //1.配置基础路径，超时时间\n    baseURL:'/api',\n    timeout:5000\n})\n\n//2.请求拦截\nservice.interceptors.request.use(config=>{\n    //console.log(config);\n    //显示进度条\n    nProgress.start();\n    //加token值\n    //config.headers.token = '11111';\n\n    //post请求，对象转字符串\n    if(config.method==='post') {\n        config.data=qs.stringify(config.data)\n    }\n\n    return config;\n})\n\n//3.响应拦截\nservice.interceptors.response.use(res=>{\n    //结束进度条\n    nProgress.done();\n\n    //错误判断500， 200\n\n    return res.data;\n},err=>{\n    //!!!写成了promises 报错！！\n    return Promise.reject(err);\n})\n\n\nexport default service\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,yBAAP;AACA,OAAOC,EAAP,MAAe,cAAf;AAEA,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAN,CAAa;EACzB;EACAC,OAAO,EAAC,MAFiB;EAGzBC,OAAO,EAAC;AAHiB,CAAb,CAAhB,C,CAMA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiCC,MAAM,IAAE;EACrC;EACA;EACAT,SAAS,CAACU,KAAV,GAHqC,CAIrC;EACA;EAEA;;EACA,IAAGD,MAAM,CAACE,MAAP,KAAgB,MAAnB,EAA2B;IACvBF,MAAM,CAACG,IAAP,GAAYX,EAAE,CAACY,SAAH,CAAaJ,MAAM,CAACG,IAApB,CAAZ;EACH;;EAED,OAAOH,MAAP;AACH,CAbD,E,CAeA;;AACAP,OAAO,CAACI,YAAR,CAAqBQ,QAArB,CAA8BN,GAA9B,CAAkCO,GAAG,IAAE;EACnC;EACAf,SAAS,CAACgB,IAAV,GAFmC,CAInC;;EAEA,OAAOD,GAAG,CAACH,IAAX;AACH,CAPD,EAOEK,GAAG,IAAE;EACH;EACA,OAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,CAVD;AAaA,eAAef,OAAf"},"metadata":{},"sourceType":"module"}